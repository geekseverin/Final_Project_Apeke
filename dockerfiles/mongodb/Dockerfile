FROM mongo:6.0

# Installer les outils n√©cessaires
RUN apt-get update && apt-get install -y \
    mongodb-database-tools \
    curl \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Installer pymongo pour les scripts Python
RUN pip3 install pymongo

# CORRECTION: Cr√©er les r√©pertoires n√©cessaires
RUN mkdir -p /sample-data
RUN mkdir -p /scripts/setup
RUN mkdir -p /docker-entrypoint-initdb.d

# CORRECTION: Copier les donn√©es d'exemple AVANT le script d'init
COPY sample-data/ /sample-data/

# V√©rifier que les donn√©es sont bien copi√©es
RUN ls -la /sample-data/

# Copier le script d'initialisation MongoDB
COPY init-mongo.js /docker-entrypoint-initdb.d/

# CORRECTION: Copier et rendre ex√©cutable le script de population
COPY populate_mongodb.sh /scripts/setup/populate_mongodb.sh
RUN chmod +x /scripts/setup/populate_mongodb.sh

# CORRECTION: Cr√©er un script d'init qui combine l'initialisation et la population
RUN cat > /docker-entrypoint-initdb.d/00-setup-and-populate.js << 'EOF'
// Script d'initialisation complet MongoDB
print("=== Initialisation de la base de donn√©es BigData ===");

// Cr√©er la base de donn√©es
db = db.getSiblingDB('bigdata');

// Cr√©er un utilisateur pour l'application
db.createUser({
    user: "bigdata_user",
    pwd: "bigdata_pass",
    roles: [
        { role: "readWrite", db: "bigdata" }
    ]
});

// Cr√©er les collections avec des indices
db.createCollection("sales");
db.createCollection("customers");
db.createCollection("product_analysis");
db.createCollection("city_analysis");

// Cr√©er des indices pour optimiser les performances
db.sales.createIndex({ "customer_id": 1 });
db.sales.createIndex({ "product": 1 });
db.sales.createIndex({ "date": 1 });
db.customers.createIndex({ "city": 1 });
db.customers.createIndex({ "email": 1 }, { unique: true });

print("Base de donn√©es BigData initialis√©e!");

// Charger et ins√©rer les donn√©es d'exemple
print("=== Chargement des donn√©es d'exemple ===");

// Fonction pour charger un fichier JSON
function loadJSONFile(filename) {
    try {
        var content = cat(filename);
        return JSON.parse(content);
    } catch (e) {
        print("Erreur lors du chargement de " + filename + ": " + e);
        return null;
    }
}

// Charger les donn√©es de ventes
var salesData = loadJSONFile('/sample-data/sales.json');
if (salesData && salesData.length > 0) {
    db.sales.insertMany(salesData);
    print("‚úÖ " + salesData.length + " ventes ins√©r√©es");
} else {
    print("‚ùå Impossible de charger les donn√©es de ventes");
    // Donn√©es de fallback
    db.sales.insertMany([
        {"id": "s001", "product": "Laptop Dell XPS", "quantity": 1, "price": 1299.99, "date": "2024-01-15", "customer_id": "c001"},
        {"id": "s002", "product": "iPhone 15", "quantity": 2, "price": 999.99, "date": "2024-01-16", "customer_id": "c002"},
        {"id": "s003", "product": "Samsung Galaxy S24", "quantity": 1, "price": 899.99, "date": "2024-01-17", "customer_id": "c003"}
    ]);
    print("‚úÖ Donn√©es de ventes de fallback ins√©r√©es");
}

// Charger les donn√©es des clients
var customersData = loadJSONFile('/sample-data/customers.json');
if (customersData && customersData.length > 0) {
    db.customers.insertMany(customersData);
    print("‚úÖ " + customersData.length + " clients ins√©r√©s");
} else {
    print("‚ùå Impossible de charger les donn√©es des clients");
    // Donn√©es de fallback
    db.customers.insertMany([
        {"id": "c001", "name": "Alice Martin", "email": "alice.martin@email.com", "city": "Paris", "age": 28},
        {"id": "c002", "name": "Bob Dupont", "email": "bob.dupont@email.com", "city": "Lyon", "age": 35},
        {"id": "c003", "name": "Claire Moreau", "email": "claire.moreau@email.com", "city": "Marseille", "age": 42}
    ]);
    print("‚úÖ Donn√©es de clients de fallback ins√©r√©es");
}

// V√©rification finale
print("=== V√©rification finale ===");
print("Collections cr√©√©es: " + db.getCollectionNames());
print("Nombre de ventes: " + db.sales.count());
print("Nombre de clients: " + db.customers.count());

if (db.sales.count() > 0 && db.customers.count() > 0) {
    print("üéâ Initialisation MongoDB termin√©e avec succ√®s!");
} else {
    print("‚ùå Probl√®me lors de l'initialisation");
}
EOF

# Exposer le port MongoDB
EXPOSE 27017

# CORRECTION: Script de d√©marrage personnalis√©
RUN cat > /custom-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "üçÉ D√©marrage MongoDB avec initialisation personnalis√©e..."

# D√©marrer MongoDB en arri√®re-plan
docker-entrypoint.sh mongod --bind_ip_all &
MONGOD_PID=$!

# Attendre que MongoDB soit pr√™t
echo "‚è≥ Attente de MongoDB..."
until mongosh --host localhost:27017 --eval "db.runCommand('ping')" --quiet >/dev/null 2>&1; do
    sleep 2
done

echo "‚úÖ MongoDB est pr√™t!"

# Ex√©cuter le script de population si n√©cessaire
if [ -f "/scripts/setup/populate_mongodb.sh" ]; then
    echo "üîÑ Ex√©cution du script de population..."
    /scripts/setup/populate_mongodb.sh || echo "‚ö†Ô∏è Script de population √©chou√© (peut-√™tre d√©j√† fait)"
fi

# Attendre le processus MongoDB
wait $MONGOD_PID
EOF

RUN chmod +x /custom-entrypoint.sh

# CORRECTION: Utiliser notre script d'entr√©e personnalis√©
# CMD ["/custom-entrypoint.sh"]

# Pour la compatibilit√©, garder le CMD par d√©faut mais permettre l'init
CMD ["mongod", "--bind_ip_all"]